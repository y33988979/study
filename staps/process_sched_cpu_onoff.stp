#!/usr/bin/stap
/* This script works similar to ftrace's sched_switch. It displays a list of
 * processes which get switched in and out of the scheduler. The format of display
 * is PROCESS_NAME PROCESS_PID CPU TIMESTAMP PID: PRIORITY: PROCESS STATE ->/+
 *    NEXT_PID : NEXT_PRIORITY: NEXT_STATE NEXT_PROCESS_NAME 
 * -> indicates that prev process is scheduled out and the next process is 
 *    scheduled in.
 * + indicates that prev process has woken up the next process.
 * The usage is sched_switch.stp <"pid"/"name"> pid/name
 */

global target_pid
global target_name

function state_calc(state) {
	if(state == 0)
	status = "R"
	if(state == 1)
	status = "S"
	if(state == 2)
	status = "D"
	if(state == 4)
	status = "T"
	if(state == 8)
	status = "T"
	if(state == 16)
	status = "Z"
	if(state == 32)
	status = "EXIT_DEAD"
	return status
}
probe scheduler.wakeup
{
	if (target_pid != 0
	    && task_tid != target_pid
	    && pid() != target_pid)
			next

	if (target_name != ""
	    && task_execname(task) != target_name
	    && execname() != target_name)
			next

	printf("wakeup: %-16s%5d %5d %5d:%5d:%s +   %5d:%5d:%s %-16s\n",
                execname(), task_cpu(task), gettimeofday_ns(),
                pid(), task_prio(task_current()), state_calc(task_state(task_current())),
                task_pid(task), task_prio(task), state_calc(task_state(task)),
                task_execname(task))
}
probe scheduler.ctxswitch
{
	if (target_pid != 0
	    && next_tid != target_pid
	    && prev_tid != target_pid)
			next

	if (target_name != ""
	    && prev_task_name != target_name
	    && next_task_name != target_name)
			next

	printf("ctxswitch: %-16s%5d %5d %5d:%5d:%s ==> %5d:%5d:%s %-16s\n",prev_task_name,
		task_cpu(prev_task),gettimeofday_ns(),prev_tid,prev_priority,state_calc(prevtsk_state),next_tid,
		next_priority,state_calc(nexttsk_state),next_task_name)
}

probe scheduler.cpu_on
{
		prev_priority = $prev->prio
		prev_pid = $prev->tgid
		prev_tid = $prev->pid
		prev_task = $prev
		prev_task_name = task_execname($prev)
		prevtsk_state = $prev->state

		new = task_current()
		next_priority = new->prio
		next_pid = new->tgid
		next_tid = new->pid
		next_task = new
		next_task_name = task_execname(new)
		nexttsk_state = new->state

	if (target_pid != 0
	    && next_tid != target_pid
	    && prev_tid != target_pid)
			next

	if (target_name != ""
	    && prev_task_name != target_name
	    && next_task_name != target_name)
			next


	printf("cpu_on: %-16s%5d %5d %5d:%5d:%s ==> %5d:%5d:%s %-16s\n",prev_task_name,
		task_cpu(prev_task),gettimeofday_ns(),prev_tid,prev_priority,state_calc(prevtsk_state),next_tid,
		next_priority,state_calc(nexttsk_state),next_task_name)
}

probe begin
{
	target_pid = 0
	target_name = ""

	%( $# == 1 || $# > 2 %?
		log("Wrong number of arguments, use none, 'pid nr' or 'name proc'")
		exit()
	%)

	%( $# == 2 %?
		if(@1 == "pid") 
			target_pid = strtol(@2, 10)
		if(@1 == "name")
			target_name = @2
	%)
}
